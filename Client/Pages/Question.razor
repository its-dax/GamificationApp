@page "/Question"
@inherits PageBase
@inject IQuestionService qService
@inject NavigationManager NavMgr


@if (Questions is null)
{
    <h3>Kérdések betöltése...</h3>
}
else
{
    var approvedQuestions = Questions.Where(q => q.IsApproved);
    var notApprovedQuestions = MyQuestions.Where(q => (q.IsApproved == false));

 <CascadingAuthenticationState>              
    <AuthorizeView Roles="Student">
        <Authorized>
            <h2>Kérdés beküldése</h2>
            <hr/>
            <EditForm Model="addQuestion" OnValidSubmit="SubmitQuestion" Context="AddQuestion">
                <DataAnnotationsValidator />
                <div class="col-form-label-lg"> 
                    <label for="title">Kérdés szövege</label>
                    <InputText id="title" @bind-Value="addQuestion.Title" class="form-control"/>
                    <ValidationMessage For="@(() => addQuestion.Title)"> </ValidationMessage>
                </div>
                <div class="col-form-label-lg"> 
                    <label for="a">A</label>
                    <InputText id="a" @bind-Value="addQuestion.A" class="form-control"/>
                    <ValidationMessage For="@(() => addQuestion.A)"> </ValidationMessage>
                </div>
                <div class="col-form-label-lg"> 
                    <label for="b">B</label>
                    <InputText id="b" @bind-Value="addQuestion.B" class="form-control"/>
                    <ValidationMessage For="@(() => addQuestion.B)"> </ValidationMessage>
                </div>
                <div class="col-form-label-lg"> 
                    <label for="c">C</label>
                    <InputText id="c" @bind-Value="addQuestion.C" class="form-control"/>
                    <ValidationMessage For="@(() => addQuestion.C)"> </ValidationMessage>
                </div>
                <div class="col-form-label-lg"> 
                    <label for="d">D</label>
                    <InputText id="d" @bind-Value="addQuestion.D" class="form-control"/>
                    <ValidationMessage For="@(() => addQuestion.D)"> </ValidationMessage>
                </div>
                <div class="col-form-label-lg"> 
                    <label for="good">Helyes válasz</label>
                    <InputText id="good" @bind-Value="addQuestion.GoodAnswer" class="form-control"/>
                    <ValidationMessage For="@(() => addQuestion.GoodAnswer)"> </ValidationMessage>
                </div>
                <div class="col-form-label-lg"> 
                    <label for="subj">Tantárgy</label>
                    <InputSelect id="subj" @bind-Value="addQuestion.SubjectName" class="form-control">
                        @foreach(var sub in Subjects)
                        {
                            <option value ="@sub.Name">@sub.Name</option>
                        }
                    </InputSelect>
                </div>
                <button type="submit" class="btn btn-primary">Küldés</button>
            </EditForm>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Roles="Teacher">
        <Authorized>
            <h2>Elfogadásra váró kérdések</h2>

            @if (notApprovedQuestions.Any())
            {
                    var toApprove = notApprovedQuestions.Last();

                        deleteQ.QuestionId = toApprove.Id;
                        approveQ.QuestionId = toApprove.Id;
                        deleteQ.SubjectId = toApprove.SubjectId;
                        approveQ.SubjectId = toApprove.SubjectId;
                        <div class="col-auto">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title mb-3">
                                    @notApprovedQuestions.Last().Title
                                </h5>
                                <p class="card-text">
                                    <b>A) </b> @notApprovedQuestions.Last().A
                                </p>
                                <p class="card-text">
                                    <b>B) </b> @notApprovedQuestions.Last().B
                                </p>
                                <p class="card-text">
                                    <b>C) </b> @notApprovedQuestions.Last().C
                                </p>
                                <p class="card-text">
                                    <b>D) </b> @notApprovedQuestions.Last().D
                                </p>
                                <p class="card-text">
                                    <b>Helyes válasz: </b> @notApprovedQuestions.Last().GoodAnswer
                                </p>
                            </div>
                        </div>
                        <div class="card-footer"> 
                            <button @onclick="Approve" class="btn btn-primary">Elfogadás</button>
                            <button @onclick="Delete" class="btn btn-danger">Elutasítás</button>
                        </div>
                    </div>
                }
                else
                {
                    <h4>Nincsenek elfogadásra váró kérdések.</h4>
                }
            </Authorized>
    </AuthorizeView>
    <AuthorizeView>
        <NotAuthorized>
            <h1> Bejelentkezés szükséges </h1>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
}

@code{
    QuestionDto addQuestion = new QuestionDto();
    ApproveQuestionDto approveQ = new ApproveQuestionDto();
    ApproveQuestionDto deleteQ = new ApproveQuestionDto();

    async Task SubmitQuestion()
    {
        addQuestion.UserId = UsersId;
        await qService.AddQuestion(addQuestion);
        NavMgr.NavigateTo("/question");
    }  

    async Task Approve()
    {
        await qService.ApproveQuestion(approveQ);
        NavMgr.NavigateTo("/question", true);
    }

    async Task Delete()
    {
        await qService.DeleteQuestion(deleteQ);
        NavMgr.NavigateTo("/question", true);
    }
}
